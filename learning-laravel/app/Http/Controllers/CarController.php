<?phpnamespace App\Http\Controllers;use App\Models\Car;use Illuminate\Http\Request;class CarController extends Controller{    // We create methods in here for each page related to cars    public function getAllCars(Request $request)    {        // Check to make sure the request has a search before we try search        if ($request->search) {            // where method performs a SQL where statement            // First arg is the column            // Second is the operator            // Third is the value            // WHERE `make` = 'blah'            // When using any kind of filtering like where, we call get() instead of all()            // In SQL the % is the wildcard - it means there ca be any characters before or after the search            $cars = Car::whereAny(['make', 'model', 'description'], 'LIKE', "%$request->search%")                ->get()                ->makeHidden(['seats', 'owned', 'created_at', 'updated_at']);            return response()->json([                'message' => 'Cars retrieved',                'success' => true,                'data' => $cars            ]);        }        // Using the Car model to get all cars from the DB        $cars = Car::all()->makeHidden(['seats', 'owned', 'created_at', 'updated_at']);        return response()->json([            'message' => 'Cars retrieved',            'success' => true,            'data' => $cars        ]);    }    public function getSingleCar($id)    {        $car = Car::find($id);        return response()->json([            'message' => 'Car retrieved',            'success' => true,            'data' => $car        ]);    }    public function addCar(Request $request)    {        $request->validate([            'make' => 'required|string|min:1|max:50',            'model' => 'required|string|min:1|max:100',            'description' => 'string|max:1000',            'price' => 'required|numeric|min:0',            'seats' => 'required|numeric|min:1',            'owned' => 'required|boolean'        ]);        // To add a new row to the DB we start by making a new Car        $car = new Car();        // We then take the data from the request and put it into the car        $car->make = $request->make;        $car->model = $request->model;        $car->description = $request->description;        $car->price = $request->price;        $car->seats = $request->seats;        $car->owned = $request->owned;        // Save the new car into the DB        if ($car->save()) {            return response()->json([                'message' => 'Car added',                'success' => true,            ], 201);        }        // This failure will be rare        return response()->json([            'message' => 'Something went wrong',            'success' => false,        ], 500);    }    public function deleteCar(int $id)    {        $car = Car::find($id);        if (!$car) {            return response()->json([                'message' => 'Invalid car ID',                'success' => false,            ], 400);        }        if ($car->delete()) {            return response()->json([                'message' => 'Car deleted',                'success' => true,            ]);        }        return response()->json([            'message' => 'Something went wrong',            'success' => false,        ], 500);    }    public function updateCar(int $id, Request $request)    {        $request->validate([            'make' => 'string|min:1|max:50',            'model' => 'string|min:1|max:100',            'description' => 'string|max:1000',            'price' => 'numeric|min:0',            'seats' => 'numeric|min:1',            'owned' => 'boolean'        ]);        $car = Car::find($id);        if (!$car) {            return response()->json([                'message' => 'Invalid car ID',                'success' => false,            ], 400);        }        // ?? is the null coalescing operator        // If the thing on the left of ??, then use it        // otherwise use the thing on the right of ??        $car->make = $request->make ?? $car->make;        $car->model = $request->model ?? $car->model;        $car->description = $request->description ?? $car->description;        $car->price = $request->price ?? $car->price;        $car->seats = $request->seats ?? $car->seats;        $car->owned = $request->owned ?? $car->owned;        if ($car->save()) {            return response()->json([                'message' => 'Car updated',                'success' => true,            ]);        }        return response()->json([            'message' => 'Something went wrong',            'success' => false        ], 500);    }}